给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。

 

示例 1：


输入：root = [3,9,20,null,null,15,7]
输出：[[3],[9,20],[15,7]]
示例 2：

输入：root = [1]
输出：[[1]]
示例 3：

输入：root = []
输出：[]
 

提示：

树中节点数目在范围 [0, 2000] 内
-1000 <= Node.val <= 1000

题解思路：
用队列记录树上节点，对于每层的节点数目，用一个int型数字记录。
不断从队列中取节点存节点，每次处理一层，每一层的val用vector记录，遍历完一层后将结果存储到结果数组中后返回。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> recd;
        vector<vector<int>> res;
        int num, tmp;
        if(root) recd.push(root);
        tmp = 1;
        while(!recd.empty()){
            vector<int> tmp_vec;
            num = tmp;
            tmp = 0;
            for(int i = 0; i < num; i++){
                tmp_vec.push_back(recd.front()->val);
                if(recd.front()->left){
                    recd.push(recd.front()->left);
                    tmp++;
                }
                if(recd.front()->right){
                    recd.push(recd.front()->right);
                    tmp++;
                }
                recd.pop();
            } 
            res.push_back(tmp_vec);
        }
        return res;
    }
};
