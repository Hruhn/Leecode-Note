给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。

candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 

对于给定的输入，保证和为 target 的不同组合数少于 150 个。

 

示例 1：

输入：candidates = [2,3,6,7], target = 7
输出：[[2,2,3],[7]]
解释：
2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。
7 也是一个候选， 7 = 7 。
仅有这两种组合。
示例 2：

输入: candidates = [2,3,5], target = 8
输出: [[2,2,2,2],[2,3,3],[3,5]]
示例 3：

输入: candidates = [2], target = 1
输出: []
 

提示：

1 <= candidates.length <= 30
2 <= candidates[i] <= 40
candidates 的所有元素 互不相同
1 <= target <= 40

回溯算法，时间复杂度o()，空间复杂度o()：
利用回溯算法，将每种组合的遍历利用递归实现。
构造回溯函数，函数中利用for循环实现每种元素的取值的可能，纵向递归，调用自身实现下一个元素的选取。
由本题目要求元素可以取无限多次且返回的结果不能有重复的组合。
因此for循环作为遍历当前元素取值各种可能性的处理，每次循环中纵向往下递归的范围为当前数组范围，循环条件每次将选择范围缩减，避免重复。

代码：
class Solution {
    vector<vector<int>> res;
    vector<int> tmp;
    int sum;
public:
    void backtracking(vector<int>& candidates, int target, int startIndex){
        if(sum == target) res.push_back(tmp);
        else if(sum > target) return;
        else{
            for(int i = startIndex; i < candidates.size(); i++){
                sum += candidates[i];
                tmp.push_back(candidates[i]);
                backtracking(candidates, target, i);
                sum -= candidates[i];
                tmp.pop_back();
            }
        }
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        backtracking(candidates, target, 0);
        return res;
    }
};
