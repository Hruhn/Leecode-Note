给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。

 

示例 1：


输入：root = [3,9,20,null,null,15,7]
输出：2
示例 2：

输入：root = [2,null,3,null,4,null,5,null,6]
输出：5
 

提示：

树中节点数的范围在 [0, 105] 内
-1000 <= Node.val <= 1000

递归法，时间复杂度o(n)，空间复杂度o(height)：
以传入的节点为空为递归终止条件。
不为空时，检查左右子树的深度，若都为0，则直接返回1。若有一个深度为0，则返回另一子树的最小深度。若都不为0，则返回较小的子树深度。

代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        int left, right;
        left = minDepth(root->left);
        right = minDepth(root->right);
        if(left * right == 0){
            if(left == 0 && right == 0) return 1;
            else if(left == 0) return right + 1;
            else if(right == 0) return left + 1;
        }
        return min(left, right) + 1;
    }
};
