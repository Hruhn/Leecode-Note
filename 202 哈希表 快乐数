编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」 定义为：
对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
如果这个过程 结果为 1，那么这个数就是快乐数。
如果 n 是 快乐数 就返回 true ；不是，则返回 false 。

示例 1：
输入：n = 19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

示例 2：
输入：n = 2
输出：false

提示：

1 <= n <= 231 - 1

题解：
一个数要么是快乐数要么不是快乐数：
1.是快乐数，不断求平方和最后平方和变为1
2.不是快乐数，最后平方和落不到1，平方和在不含1的一个集合上不断变化
1）这个集合是有限的，则求平方和过程中会重复出现数字
2）这个集合是无限的，不断扩展。

针对不是快乐数的情况2），由于n位数的最大数值情况即为每位数都是9，n位9和n个9的平方和相加这两个数相比，前者为指数级增长后者为线性增长。
总体趋势看将n位数求每位的平方和为一个数量级降级过程，在n轴较大时前者必然比后者大且差距越来越大，而n靠近0处则会出现波动。
因此，不断求n位数的平方和在n大于某个值是必然再求平方和必然是减小的趋势。因此求n位数平方和必然在一个有限范围内波动，因此该集合是一个有限集合，情况2）不成立。

情况1和情况2.1）都属于平方和集合有限，而1最后落入的循环点为1，停在该点不变，而情况2.1)则在进行一个圆圈的循环。

class Solution {
public:
    int getSum(int n){
        int sum = 0;
        while(n > 0){
            sum += (n % 10) * (n % 10);
            n = n /10;
        }
        return sum;
    }

    bool isHappy(int n) {
        unordered_set<int> sums;
        int tmp;
        while(1){
            tmp = getSum(n);
            n = tmp;
            if(tmp == 1) return true;
            else{
                if(sums.find(tmp) != sums.end()) return false;
                sums.insert(tmp);
            }
        }
    }
};
