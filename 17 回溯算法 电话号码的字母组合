给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。



 

示例 1：

输入：digits = "23"
输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]
示例 2：

输入：digits = ""
输出：[]
示例 3：

输入：digits = "2"
输出：["a","b","c"]
 

提示：

0 <= digits.length <= 4
digits[i] 是范围 ['2', '9'] 的一个数字。

回溯算法，时间复杂度，空间复杂度：
利用回溯算法，将digits每位数字对应字母进行枚举遍历，利用递归实现一个数组的枚举。
代码如下：
class Solution {
    vector<string> res;
    vector<char> tmp;
public:
    void backtracking(string str, int k, int idx){
        if(tmp.size() == k){
            res.push_back(string(tmp.begin(), tmp.end()));
            return;
        }

        int end;
        if(str[idx] == '7' || str[idx] == '9') end = 4;
        else end = 3;

        char sttchar;
        if(str[idx] == '8') sttchar = 't';
        else if(str[idx] == '9') sttchar = 'w';
        else{
            sttchar = 'a' + 3 * (str[idx] - '2');
        }

        for(int i = 0; i < end; i++){
            tmp.push_back(sttchar + i);
            backtracking(str, k, idx + 1);
            tmp.pop_back();
        }
    }

    vector<string> letterCombinations(string digits) {
        if(digits.size()!= 0) backtracking(digits, digits.size(), 0);
        return res;
    }
};
