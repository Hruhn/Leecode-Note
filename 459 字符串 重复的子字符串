给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。

 

示例 1:

输入: s = "abab"
输出: true
解释: 可由子串 "ab" 重复两次构成。
示例 2:

输入: s = "aba"
输出: false
示例 3:

输入: s = "abcabcabcabc"
输出: true
解释: 可由子串 "abc" 重复四次构成。 (或子串 "abcabc" 重复两次构成。)
 

提示：

1 <= s.length <= 104
s 由小写英文字母组成


暴力算法，时间复杂度o(n^2),空间复杂度o(1)：
若可由多个重复字符串组成，假设子字符串长度为n'，有s'个子字符串，对于每个子字符串对应位置的字符都相同。
子字符串的长度范围为[1,n/2]，遍历每种长度可能，对于每种长度的子字符串判断每一段的子字符串对应位的字符是否相等。

代码如下：
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int len = s.size();
        bool res;
        for(int i = 1; i <= len / 2; i++){
            if(len % i == 0){
                res = true;
                for(int j = 0; j < i; j++){
                    for(int k = 0; k < len / i; k++){
                        if(s[j] != s[j + k * i]) {
                            res = false;
                            break;
                        }
                    }
                }
                if(res) return true;
            }
        }
        return false;
    }
};
