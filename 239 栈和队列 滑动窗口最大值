给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回 滑动窗口中的最大值 。

 

示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
示例 2：

输入：nums = [1], k = 1
输出：[1]
 

提示：

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

单调队列，时间复杂度o(n)，空间复杂度o(k)：

一个窗口范围内，一个最大值左边的数没有可能变成最大值，其右边的值随着窗口滑动后续有可能变成最大值。
因此每个窗口内，记录下最大值，即最大值右边的逐渐递减的一个又一个“最大值”，
该“最大值”满足：当前窗口内，在最大值右边且小于最大值，每个“最大值”的右边都没有比其大的值。
用一个deque记录这些值，其中的值按从大到小的顺序存储。
队列为空时直接存储当前遍历到数组值（存储数组下标，比较时比较数组中值），不为空时循环判断当前值是否大于队列尾部的值，大于则将队列尾部出队直至队列为空或队列尾部大于当前值，然后存入当前值。
移动窗口时，对于右边新的窗口值进行上述进队列的判断与操作。并对队列头部最大值进行是否在窗口内判断，不在当前窗口则出队，直至将在窗口内的队首最大值记录进结果数组。

代码：
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> recd;

        for(int i = 0; i < k; i++){
            while(!recd.empty() && nums[i] > nums[recd.back()]){
                recd.pop_back();
            }
            recd.push_back(i);
        }

        res.push_back(nums[recd.front()]);

        for(int i = k; i < nums.size(); i++){
            while(!recd.empty() && nums[i] > nums[recd.back()]) recd.pop_back();
            recd.push_back(i);
            if(recd.front() < i - k + 1) recd.pop_front();
            res.push_back(nums[recd.front()]);
        }

        return res;
    }
};
