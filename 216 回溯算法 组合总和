找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：

只使用数字1到9
每个数字 最多使用一次 
返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。

 

示例 1:

输入: k = 3, n = 7
输出: [[1,2,4]]
解释:
1 + 2 + 4 = 7
没有其他符合的组合了。
示例 2:

输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]
解释:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
没有其他符合的组合了。
示例 3:

输入: k = 4, n = 1
输出: []
解释: 不存在有效的组合。
在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 > 1，没有有效的组合。
 

提示:

2 <= k <= 9
1 <= n <= 60


解题思路，时间复杂度o()，空间复杂度o(k)：
递归到剩下数组还剩最后两个数，利用双指针法求解符合要求的解。
构造k层递归，每一层递归中，从当前可以选择的数组范围中遍历选择一个元素记录在数组中。
构造下一层递归，并将可选择的数组范围减少一个数即当前层选中并记录在数组中的数，等下层递归返回完之后将数组中该数弹出。

代码：
class Solution {
    vector<vector<int>> res;
    vector<int> comb;
public:
    int getSum(void){
        int sum = 0;
        for(auto elem: comb) sum += elem;
        return sum;
    }

    void backTracking(int n, int k, int startIndex){
        if(getSum() > n) return;

        if(comb.size() == k - 2){
            int left = startIndex;
            int right = 9;
            while(left < right){
                if(getSum() + left + right > n) right--;
                else if(getSum() + left + right < n) left++;
                else{
                    comb.push_back(left);
                    comb.push_back(right);
                    res.push_back(comb);
                    comb.pop_back();
                    comb.pop_back();
                    left++;
                    right--;
                }
            }
            return;
        }

        for(int i = startIndex; i <= 9; i++){
            comb.push_back(i);
            backTracking(n, k, i + 1);
            comb.pop_back();
        }
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        backTracking(n, k, 1);
        return res;
    }
};
