给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。

不允许修改 链表。

 

示例 1：



输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。
示例 2：



输入：head = [1,2], pos = 0
输出：返回索引为 0 的链表节点
解释：链表中有一个环，其尾部连接到第一个节点。
示例 3：



输入：head = [1], pos = -1
输出：返回 null
解释：链表中没有环。
 

提示：

链表中节点的数目范围在范围 [0, 104] 内
-105 <= Node.val <= 105
pos 的值为 -1 或者链表中的一个有效索引
 

进阶：你是否可以使用 O(1) 空间解决此题？


哈希表法，时间复杂度o(n)，空间复杂度o(n):
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_map<ListNode*, int> records;

        ListNode* tmp = head;
        int i = 0;

        while(tmp != nullptr){
            if(records.find(tmp) != records.end()) return records.find(tmp)->first;
            else records[tmp] = i++;
            tmp = tmp->next;
        }

        return nullptr;
    }
};

快慢指针法，时间复杂度o(n)，空间复杂度o(1):
在有环的情况下，在头结点设置一快一慢两个指针，一个步长为1，一个步长为2。
在进入环之后两个指针一定会相遇：假设环外节点数为x，环内结点数为y+z，两指针相遇于与环内某点，距离入环节点y个节点处。
则有慢指针走了x+y，快指针走了x+n(y+z)+y，2(x+y)=x+n(y+z)+y => x+y = n(y+z) => x=n(y+z)-y。
假设再设置一个步长为1的中间指针放置在快慢指针相遇点。慢指针再次从头节点开始走，走了x到环入口时，中间指针此时走了x=n(y+z)-y步，即离原始位置还差y步即环入口处。

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;

        do {
            if(slow == nullptr || fast == nullptr || fast->next == nullptr) return nullptr;
            slow = slow->next;
            fast = fast->next->next;
        } while(slow != fast);

        ListNode* mid = slow;
        slow = head;

        while(slow != mid){
            slow = slow->next;
            mid = mid->next;
        }

        return mid;
    }
};
