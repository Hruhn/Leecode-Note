给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。

你可以按 任何顺序 返回答案。

 

示例 1：

输入：n = 4, k = 2
输出：
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
示例 2：

输入：n = 1, k = 1
输出：[[1]]
 

提示：

1 <= n <= 20
1 <= k <= n

题解思路，回溯算法，复杂度分析
时间复杂度：O(( k n )×k)，分析见「思路」部分。
空间复杂度：O(n+k)=O(n)，即递归使用栈空间的空间代价和临时数组 temp 的空间代价。

剪枝思路：
当剩下待遍历的集合显然不满足最终结果的要求时，直接跳过。
当剩下的集合数目加上已经在path中的数字的总数不满足k时，直接跳过。


代码如下：
class Solution {
    vector<vector<int>> res;
    vector<int> path;
    int startindex;

public:
    void backtracking(int n, int k, int startindex){
        if(path.size() == k){
            res.push_back(path);
            return;
        }
        for(int i = startindex; i <= n; i++){
            if(n - startindex + 1 + path.size() < k) return;
            path.push_back(i);
            backtracking(n, k, i + 1);
            path.pop_back();
        }
    }

    vector<vector<int>> combine(int n, int k) {
        backtracking(n, k, 1);
        return res;
    }
};
