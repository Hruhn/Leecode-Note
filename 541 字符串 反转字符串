给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。

如果剩余字符少于 k 个，则将剩余字符全部反转。
如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。
 

示例 1：
输入：s = "abcdefg", k = 2
输出："bacdfeg"

示例 2：
输入：s = "abcd", k = 2
输出："bacd"
 

提示：

1 <= s.length <= 104
s 仅由小写英文组成
1 <= k <= 104

题解思路：
编写一个反转字符串的函数，输入字符串与目标反转的开始下标和结束下标（检验范围是否合法，若end下标大于size - 1，则自动将end变为size - 1），对字符串目标下标范围内字符进行翻转。
对字符串以2k为一步长进行处理，最后的小于2k的尾巴也直接交由上述函数处理，start为剩余部分的开头，结束为start + k - 1，若剩余部分不到k，上面函数会自动调整边界。

代码：
class Solution {
public:
    void rvsSubStr(string& s, int start, int end){
        end = end > s.size() - 1 ? s.size() - 1 : end;
        int mid = (start + end) / 2;
        for(int i = start; i <= mid; i++){
            swap(s[i], s[start + end - i]);
        }
    }
    string reverseStr(string s, int k) {
        int i = 0;
        for(; i <= s.size() / (2*k); i++){
            rvsSubStr(s, i * 2*k, i * 2*k + k - 1);
        }
        if(i * 2 * k <= s.size() - 1) rvsSubStr(s, i * 2*k, i * 2*k + k - 1);
        return s;
    }
};

官方简略版：
class Solution {
public:
    string reverseStr(string s, int k) {
        int n = s.length();
        for (int i = 0; i < n; i += 2 * k) {
            reverse(s.begin() + i, s.begin() + min(i + k, n));
        }
        return s;
    }
};
