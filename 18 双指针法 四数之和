给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：

0 <= a, b, c, d < n
a、b、c 和 d 互不相同
nums[a] + nums[b] + nums[c] + nums[d] == target
你可以按 任意顺序 返回答案 。

 

示例 1：

输入：nums = [1,0,-1,0,-2,2], target = 0
输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
示例 2：

输入：nums = [2,2,2,2,2], target = 8
输出：[[2,2,2,2]]
 

提示：

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109


双指针法，时间复杂度o(n^3)，空间复杂度o(1)：
先将数组排序，通过两层遍历确定四个数中的前两个数i、j，在第二层遍历中，j后面的数组段即为剩下两个数字的查找范围。
在这段查找范围内，利用双指针，一个left指针指向最小的数，一个right指针指向最大的数，不断判断四数之和与target的大小关系来调整两个指针的位置。
若和小，则让left指针向右移动使之变大，right反之亦然。同时确保left小于right。
同时注意四数之和的范围不能超过int所能表示数的范围，因此将数据转型成long。
四数之和每个数的取值，遍历时，为避免重复结果，下一次遍历的值不能与上一次的值相等，若相等则跳过。

代码：
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;

        sort(nums.begin(), nums.end());

        for(int i = 0; i < nums.size(); i++){
            for(int j = i + 1; j < nums.size(); j++){
                int left = j + 1;
                int right = nums.size() - 1;
                while(left < right){

                    if((long)nums[i] + nums[j] + nums[left] + nums[right] > target){
                        right--;
                    }
                    else if((long)nums[i] + nums[j] + nums[left] + nums[right] < target){
                        left++;
                    }
                    else{
                        res.push_back(vector<int>{nums[i], nums[j], nums[left], nums[right]});
                        while(left < right && nums[left] == nums[left + 1]) left++;
                        while(left < right && nums[right] == nums[right - 1]) right--;
                        left++;
                        right--;
                    }
                }
                while(j < nums.size() - 1 && nums[j] == nums[j + 1]) j++;
            }
            while(i < nums.size() - 1 && nums[i] == nums[i + 1]) i++;
        }

        return res;
    }
};
