给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。

每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:

0 <= j <= nums[i] 
i + j < n
返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。

 

示例 1:

输入: nums = [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
示例 2:

输入: nums = [2,3,0,1,4]
输出: 2
 

提示:

1 <= nums.length <= 104
0 <= nums[i] <= 1000
题目保证可以到达 nums[n-1]

解题思路，时间复杂度o(n)，空间复杂度o(1):
用变量记录当前可达位置range以及目前已走的步数num，初始值分别为下标0，以及0。
由于题目设置为必然可以到达，通过while循环判断当前可达位置range是否小于n - 1。
若为是，则需要向前跳跃，步数num加一，同时遍历当前可达范围内的下标作为本次跳跃的起点，遍历并取最大range。
新的range即为进行了num次跳跃后能达到的最远下标，同时也是进行下一步跳跃的可大范围起点。
同时，遍历range中下标作为起点时，为避免重复，每次取值开始都为上一个range的+1，这样避免重复计算。

代码：
class Solution {
public:
    int jump(vector<int> &nums)
{
    if(nums.size() <= 1) return 0;
    int num = 0;
    int range = 0,tmp = 0;
    int cur = 0;
    int len = nums.size();

    while(range < len - 1){
        num++;
        for(int i = cur; i <= range; i++){
            tmp = i + nums[i] > tmp ? i + nums[i] : tmp;
        }
        cur = range + 1;
        range = tmp;
    }

    return num;
}
};


