给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。

 

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
 

提示：

1 <= nums.length <= 104
0 <= nums[i] <= 105


贪心算法，时间复杂度o(n)，空间复杂度o(1)：
计算当前的能够抵达的最远下标，一路前进。
遍历数组，首先判断能抵达的最远下标是否覆盖当前所处的下标，是则计算当前下标出发能达到的最远下标，若更大则更新最远下标。
遍历完数组检查最远下标是否能覆盖数组最后一个下标，能则返回true，否则false。

代码：
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int furthest = 0;
        for(int i = 0; i < nums.size() && furthest >= i; i++){
            if(nums[i] != 0) furthest = i + nums[i] > furthest ? i + nums[i] : furthest;
        }
        if(furthest >= nums.size() - 1) return true;
        else return false;
    }
};
