给你二叉树的根节点 root ，返回它节点值的 前序 遍历。
(后序遍历是前父右左的反过来）
 

示例 1：


输入：root = [1,null,2,3]
输出：[1,2,3]
示例 2：

输入：root = []
输出：[]
示例 3：

输入：root = [1]
输出：[1]
示例 4：


输入：root = [1,2]
输出：[1,2]
示例 5：


输入：root = [1,null,2]
输出：[1,2]

题解思路，时间复杂度o(n),空间复杂度o(n)：
前序遍历时，先记录根节点值，再遍历左子树和右子树。用栈记录待遍历的节点，先将右边的子节点入栈，再将左边的子节点入栈。
这样处理完根节点时根据栈先进后出的原理，先处理左结点后处理右结点。
代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        stack<TreeNode*> tnode;
        if(root) tnode.push(root);
        vector<int> res;
        while(!tnode.empty()){
            TreeNode* tmp = tnode.top();
            tnode.pop();
            res.push_back(tmp->val);
            if(tmp->right) tnode.push(tmp->right);
            if(tmp->left) tnode.push(tmp->left);
        }
        return res;
    }
};
