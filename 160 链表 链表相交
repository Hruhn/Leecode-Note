给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。

图示两个链表在节点 c1 开始相交：
![image](https://github.com/Hruhn/Leecode-Note/blob/main/imgs/image1.png?raw=true)


题目数据 保证 整个链式结构中不存在环。

注意，函数返回结果后，链表必须 保持其原始结构 。

 

示例 1：



输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Intersected at '8'
解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。
在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。

示例 2：



输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Intersected at '2'
解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。
在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。


示例 3：



输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。
由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
这两个链表不相交，因此返回 null 。

双指针法，时间复杂度o(m + n)，空间复杂度o(1)
假设链表a、b有相交结点，两链表长度分别为a、b，两链表相交部分的长度为c，a链表不相交的长度为a-c，b链表不相交长度为b-c。
如图所示：

考虑到a-c不等于b-c的情况，当保持两链表遍历速度一致时，较短的一条链表假设是a链表先到自身链表尾，此时，该链表遍历变量取一个链表头，继续遍历。b链表同理。
a链表再次走到相交结点是，走过来a - c + c + b - c = a + b - c个节点，b链表再次遍历到相交结点时也走过同样长度。此时二者以相同速率相遇于相交结点。

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {

        ListNode* a = headA;
        ListNode* b = headB;

        while(a != b){
            if(a == nullptr) a = headB;
            else a = a->next;
            
            if(b == nullptr) b = headA;
            else b = b->next;
        }

        return a;
    }
};
